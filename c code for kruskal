#include <stdio.h>
#include <stdlib.h>

#define MAX 100
#define INF 999

// Declare cost matrix and visited array
int cost[MAX][MAX];
int visited[MAX];

void main() {
    int i, j, n, no_edge = 0;
    int a, b, v, min, mincost = 0;

    // Clear screen
    clrscr();

    // Get the number of nodes from user
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    // Get the adjacency matrix from user
    printf("\nEnter the adjacency matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0) {
                cost[i][j] = INF;
            }
        }
    }

    // Initialize visited array with 0
    for (i = 1; i <= n; i++) {
        visited[i] = 0;
    }

    // Set visited[1] to 1 to start the algorithm from node 1
    visited[1] = 1;

    // Loop until all edges are included in the minimum spanning tree
    while (no_edge < n - 1) {
        min = INF;

        // Find the minimum edge connecting the tree and a new vertex
        for (i = 1; i <= n; i++) {
            if (visited[i] == 1) {
                for (j = 1; j <= n; j++) {
                    if (visited[j] == 0 && cost[i][j] != 0) {
                        if (min > cost[i][j]) {
                            min = cost[i][j];
                            a = i;
                            b = v = j;
                        }
                    }
                }
            }
        }

        // If a new vertex is found, add it to the tree and update the minimum cost
        if (visited[v] == 0) {
            printf("%d  ->  %d  =  %d\n", a, b, min);
            mincost += min;
            visited[v] = 1;
            no_edge++;
        }
    }

    // Print the minimum cost of the spanning tree
    printf("\nMinimum cost of the spanning tree: %d\n", mincost);

    // Wait for user input before exiting
    getch();
}
